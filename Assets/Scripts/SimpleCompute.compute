// A compute shader needs to have a main function known as a kernel, indicated via:
//#pragma kernel FunctionKernel // #pragma kernel <name> like #pragma surface <name>

#pragma kernel WaveKernel


// Macros
#define PI 3.14159265358979323846


// properties
float _Step, _Time, _TransitionProgress;
uint _Resolution;


// a structured memory with read wirte enabled
RWStructuredBuffer<float3> _Positions;


float2 GetUV(uint3 id) {
	return (id.xy + 0.5) * _Step - 1.0;
}


void SetPosition(uint3 id, float3 position) {
	if (id.x < _Resolution && id.y < _Resolution) {
		_Positions[id.x + id.y * _Resolution] = position;
	}
}

// --------------- Graph Functions ----------------------------------------------

float3 Wave(float u, float v, float t) {
	float3 p;
	p.x = u;
	p.y = sin(PI * (u + v + t));
	p.z = v;
	return p;
}

[numthreads(8, 8, 1)] 
void WaveKernel(uint3 id: SV_DispatchThreadID)
{
	float2 uv = GetUV(id);
	SetPosition(id, Wave(uv.x, uv.y, _Time));
}

